{"version":3,"file":"mocks.cjs","sourceRoot":"","sources":["../../src/tests/mocks.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BtcAccountType,\n  EthAccountType,\n  BtcMethod,\n  EthMethod,\n  EthScope,\n  BtcScope,\n  KeyringAccountEntropyTypeOption,\n} from '@metamask/keyring-api';\nimport type {\n  CaipChainId,\n  KeyringAccount,\n  KeyringAccountEntropyMnemonicOptions,\n  KeyringAccountType,\n} from '@metamask/keyring-api';\nimport { KeyringTypes } from '@metamask/keyring-controller';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { v4 } from 'uuid';\n\nexport const ETH_EOA_METHODS = [\n  EthMethod.PersonalSign,\n  EthMethod.Sign,\n  EthMethod.SignTransaction,\n  EthMethod.SignTypedDataV1,\n  EthMethod.SignTypedDataV3,\n  EthMethod.SignTypedDataV4,\n] as const;\n\nexport const ETH_ERC_4337_METHODS = [\n  EthMethod.PatchUserOperation,\n  EthMethod.PrepareUserOperation,\n  EthMethod.SignUserOperation,\n] as const;\n\nexport const createMockInternalAccount = ({\n  id = v4(),\n  address = '0x2990079bcdee240329a520d2444386fc119da21a',\n  type = EthAccountType.Eoa,\n  name = 'Account 1',\n  keyringType = KeyringTypes.hd,\n  snap,\n  methods,\n  scopes,\n  importTime = Date.now(),\n  lastSelected = Date.now(),\n  options,\n}: {\n  id?: string;\n  address?: string;\n  type?: KeyringAccountType;\n  name?: string;\n  keyringType?: KeyringTypes;\n  scopes?: CaipChainId[];\n  methods?: (EthMethod | BtcMethod)[];\n  snap?: {\n    id: string;\n    enabled: boolean;\n    name: string;\n  };\n  importTime?: number;\n  lastSelected?: number;\n  options?: Record<string, unknown>;\n} = {}): InternalAccount => {\n  const getInternalAccountDefaults = () => {\n    switch (type) {\n      case `${EthAccountType.Eoa}`:\n        return {\n          methods: [...Object.values(ETH_EOA_METHODS)],\n          scopes: [EthScope.Eoa],\n        };\n      case `${EthAccountType.Erc4337}`:\n        return {\n          methods: [...Object.values(ETH_ERC_4337_METHODS)],\n          scopes: [EthScope.Mainnet], // Assuming we are using mainnet for those Smart Accounts.\n        };\n      case `${BtcAccountType.P2wpkh}`:\n        return {\n          methods: [...Object.values(BtcMethod)],\n          scopes: [BtcScope.Mainnet],\n        };\n      default:\n        throw new Error(`Unknown account type: ${type as string}`);\n    }\n  };\n\n  const defaults = getInternalAccountDefaults();\n\n  return {\n    id,\n    address,\n    options: options ?? {},\n    methods: methods ?? defaults.methods,\n    scopes: scopes ?? defaults.scopes,\n    type,\n    metadata: {\n      name,\n      keyring: { type: keyringType },\n      importTime,\n      lastSelected,\n      // Use spread operator, to avoid having a `snap: undefined` if not defined.\n      ...(snap ? { snap } : {}),\n    },\n  } as InternalAccount;\n};\n\nexport const createExpectedInternalAccount = (\n  args: Parameters<typeof createMockInternalAccount>[0],\n) => {\n  return createMockInternalAccount({\n    ...args,\n    importTime: expect.any(Number),\n    lastSelected: expect.any(Number),\n  });\n};\n\nexport const createMockInternalAccountOptions = (\n  keyringIndex: number,\n  keyringType: KeyringTypes,\n  groupIndex: number,\n): KeyringAccount['options'] => {\n  if (keyringType === KeyringTypes.hd) {\n    const entropySource = `mock-keyring-id-${keyringIndex}`;\n    const derivationPath = `m/44'/60'/0'/0/${groupIndex}`;\n\n    return {\n      entropySource,\n      derivationPath,\n      groupIndex,\n      // New `KeyringAccount` typed options:\n      entropy: {\n        type: KeyringAccountEntropyTypeOption.Mnemonic,\n        id: entropySource,\n        derivationPath,\n        groupIndex,\n      } as KeyringAccountEntropyMnemonicOptions,\n    };\n  }\n\n  return {};\n};\n"]}