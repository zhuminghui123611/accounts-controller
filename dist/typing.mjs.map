{"version":3,"file":"typing.mjs","sourceRoot":"","sources":["../src/typing.ts"],"names":[],"mappings":"","sourcesContent":["import type { KeyringAccountEntropyOptions } from '@metamask/keyring-api';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\n\nimport type { AccountsControllerState } from './AccountsController';\n\n/**\n * Type constraint to ensure a type is compatible with {@link AccountsControllerState}.\n * If the constraint is not matching, this type will resolve to `never` and thus, fails\n * to compile.\n */\ntype IsAccountControllerState<Type extends AccountsControllerState> = Type;\n\n/**\n * A type compatible with {@link InternalAccount} which removes any use of recursive-type.\n */\nexport type StrictInternalAccount = Omit<InternalAccount, 'options'> & {\n  // Use stricter options, which are relying on `Json` (which sometimes\n  // cause compiler errors because of instanciation \"too deep\".\n  // In anyway, we should rarely have to use those \"untyped\" options.\n  options: {\n    entropy?: KeyringAccountEntropyOptions;\n    exportable?: boolean;\n  };\n};\n\n/**\n * A type compatible with {@link AccountControllerState} which can be used to\n * avoid recursive-type issue with `internalAccounts`.\n */\nexport type AccountsControllerStrictState = IsAccountControllerState<{\n  internalAccounts: {\n    accounts: Record<InternalAccount['id'], StrictInternalAccount>;\n    selectedAccount: InternalAccount['id'];\n  };\n}>;\n"]}